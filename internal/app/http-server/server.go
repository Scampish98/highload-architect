package httpserver

import (
	"context"
	"errors"
	"fmt"
	"log/slog"
	"net/http"

	"highload-architect/pkg/httputil"

	"highload-architect/internal/app/container"
	"highload-architect/internal/transport/http/middlewares"

	httphandler "highload-architect/internal/transport/http/handlers"

	"github.com/gin-gonic/gin"

	"highload-architect/internal/config"

	"github.com/swaggo/files"
	"github.com/swaggo/gin-swagger"
	_ "highload-architect/docs" // docs is generated by Swag CLI, you have to import it.
)

//	@title			Highload-Architect Homework Backend API
//	@version		1.0
//	@description	Swagger API for Highload-Architect Homework API Gateway backend http-server

//	@BasePath	/api

//	@securityDefinitions.apikey	ApiKeyAuth
//	@in							header
//	@name						X-Api-Key

type HTTPServer struct {
	server *http.Server
	logger *slog.Logger
}

func New(cfg *config.HTTPServer, container *container.Container, logger *slog.Logger) *HTTPServer {
	httpServer := &http.Server{
		Addr:         fmt.Sprintf("%s:%d", cfg.Host, cfg.Port),
		ReadTimeout:  cfg.ReadTimeout,
		WriteTimeout: cfg.WriteTimeout,
		Handler:      newRouter(container).Handler(),
	}

	return &HTTPServer{
		server: httpServer,
		logger: logger,
	}
}

func newRouter(container *container.Container) *gin.Engine {
	router := gin.Default()

	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	api := router.Group("/api")
	api.Use(middlewares.Error(container))

	httphandler.RegUnauthHTTPHandlers(api, container)

	authGroup := api.Group("")
	authGroup.Use(httputil.Wrap(middlewares.Auth(container)))
	httphandler.RegAuthHTTPHandlers(authGroup, container)

	return router
}

func (s *HTTPServer) Start() error {
	if err := s.server.ListenAndServe(); !errors.Is(err, http.ErrServerClosed) {
		s.logger.Info("http server server returns")
		return err
	}

	return nil
}

func (s *HTTPServer) Shutdown(ctx context.Context) error {
	return s.server.Shutdown(ctx)
}
